# -*- coding: utf-8 -*-
"""KnightDialer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y1PxThYkvfB7-8j32R5-_pa9VqS51pad
"""

import time
def knightDialer(n):
	if n == 1:
		return 10
	graph = {0:[4, 6], 1:[6, 8], 2:[7, 9], 3:[4, 8], 4:[0, 3, 9], 6:[0, 1, 7], 7:[2, 6], 8:[1, 3], 9:[2, 4]}
	cnt = {0:1, 1:1, 2:1, 3:1, 4:1, 6:1, 7:1, 8:1, 9:1}
	for i in range(n - 1):
		tmp = {0:0, 1:0, 2:0, 3:0, 4:0, 6:0, 7:0, 8:0, 9:0}
		for k in cnt:
			for v in graph[k]:
				tmp[v]  +=  cnt[k]
		cnt = tmp
	return sum(cnt.values()) % (10 **9 + 7)

n = int(input())
start = time.time()
print(knightDialer(n))
end_ = time.time() - start

print(round(end_,5))

!cat DPfast.csv

import pandas as pd
data=pd.read_csv('DPfast.csv')
data.columns=['size','operation']
print (data)

import numpy as np

X_=np.array(data['size']).reshape(-1,1)
X_

Y_=np.array(data['operation']).reshape(-1,1)
Y_

def log2_n(arr):
  return np.log2(arr)
log2_n(X_)

def sqrt_n(arr):
  return arr**(1/2)
sqrt_n(X_)

def n2(arr):
  return arr**2
n2(X_)

def n3(arr):
  return arr**3
n3(X_)

def nlogn(arr):
  return arr*np.log2(arr)
nlogn(X_)

from sklearn.linear_model import LinearRegression
model = LinearRegression()

model.fit(nlogn(X_),Y_)

model.coef_

model.intercept_

import time
def knightDialer(n):
        f = [10,20,46,104]
        if n <= 4:
            return f[n-1]
        cnt = 5
        while cnt <= n:
            temp = f[3]- f[2]*2
            if cnt % 2 != 0: temp+= f[1]    
            else: temp *= 2
            f.append((f[3]*2 + temp)% (10**9 + 7))
            f.pop(0)
            cnt+=1
        return f[-1] % (10 **9 + 7)

n = int(input())
start = time.time()
print(knightDialer(n))
end_ = time.time() - start

print(round(end_,5))